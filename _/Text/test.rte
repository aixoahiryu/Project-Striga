{"content": "from tkinter import *\nfrom tkinter.filedialog import askopenfilename, asksaveasfilename\nfrom functools import partial\nfrom json import loads, dumps\n\n# Setup\nroot = Tk()\nroot.geometry('600x600')\n\n# Used to make title of the application\napplicationName = 'Rich Text Editor'\nroot.title(applicationName)\n\n# Current File Path\nfilePath = None\n\n# initial directory to be the current directory\ninitialdir = '.'\n\n# Define File Types that can be choosen\nvalidFileTypes = (\n    (\"Rich Text File\",\"*.rte\"),\n    (\"all files\",\"*.*\")\n)\n\n# Setting the font and Padding for the Text Area\nfontName = 'Bahnschrift'\npadding = 60\n\n# Infos about the Document are stored here\ndocument = None\n\n# Default content of the File\ndefaultContent = {\n    \"content\": \"\",\n    \"tags\": {\n        'bold': [(), ()]\n    },\n}\n\n# Transform rgb to hex\ndef rgbToHex(rgb):\n    return \"#%02x%02x%02x\" % rgb  \n\n# Add Different Types of Tags that can be added to the document.\ntagTypes = {\n    # Font Settings\n    'Bold': {'font': f'{fontName} 15 bold'},\n    'Italic': {'font': f'{fontName} 15 italic'},\n    'Code': {'font': 'Consolas 15', 'background': rgbToHex((200, 200, 200))},\n\n    # Sizes\n    'Normal Size': {'font': f'{fontName} 15'},\n    'Larger Size': {'font': f'{fontName} 25'},\n    'Largest Size': {'font': f'{fontName} 35'},\n\n    # Background Colors\n    'Highlight': {'background': rgbToHex((255, 255, 0))},\n    'Highlight Red': {'background': rgbToHex((255, 0, 0))},\n    'Highlight Green': {'background': rgbToHex((0, 255, 0))},\n    'Highlight Black': {'background': rgbToHex((0, 0, 0))},\n\n    # Foreground /  Text Colors\n    'Text White': {'foreground': rgbToHex((255, 255, 255))},\n    'Text Grey': {'foreground': rgbToHex((200, 200, 200))},\n    'Text Blue': {'foreground': rgbToHex((0, 0, 255))},\n    'Text green': {'foreground': rgbToHex((0, 255, 0))},\n    'Text Red': {'foreground': rgbToHex((255, 0, 0))},\n}\n\n# Handle File Events\ndef fileManager(event=None, action=None):\n    global document, filePath\n\n    # Open\n    if action == 'open':\n        # ask the user for a filename with the native file explorer.\n        filePath = askopenfilename(filetypes=validFileTypes, initialdir=initialdir)\n\n\n        with open(filePath, 'r') as f:\n            document = loads(f.read())\n\n        # Delete Content\n        textArea.delete('1.0', END)\n        \n        # Set Content\n        textArea.insert('1.0', document['content'])\n\n        # Set Title\n        root.title(f'{applicationName} - {filePath}')\n\n        # Reset all tags\n        resetTags()\n\n        # Add To the Document\n        for tagName in document['tags']:\n            for tagStart, tagEnd in document['tags'][tagName]:\n                textArea.tag_add(tagName, tagStart, tagEnd)\n                print(tagName, tagStart, tagEnd)\n\n    elif action == 'save':\n        document = defaultContent\n        document['content'] = textArea.get('1.0', END)\n\n        for tagName in textArea.tag_names():\n            if tagName == 'sel': continue\n\n            document['tags'][tagName] = []\n\n            ranges = textArea.tag_ranges(tagName)\n\n            for i, tagRange in enumerate(ranges[::2]):\n                document['tags'][tagName].append([str(tagRange), str(ranges[i+1])])\n\n        if not filePath:\n            # ask the user for a filename with the native file explorer.\n            newfilePath = asksaveasfilename(filetypes=validFileTypes, initialdir=initialdir)\n    \n            # Return in case the User Leaves the Window without\n            # choosing a file to save\n            if newfilePath is None: return\n\n            filePath = newfilePath\n\n        if not filePath.endswith('.rte'):\n            filePath += '.rte'\n\n        with open(filePath, 'w') as f:\n            print('Saving at: ', filePath)  \n            f.write(dumps(document))\n\n        root.title(f'{applicationName} - {filePath}')\n\n\ndef resetTags():\n    for tag in textArea.tag_names():\n        textArea.tag_remove(tag, \"1.0\", \"end\")\n\n    for tagType in tagTypes:\n        textArea.tag_configure(tagType.lower(), tagTypes[tagType])\n\n\ndef keyDown(event=None):\n    root.title(f'{applicationName} - *{filePath}')\n\n\ndef tagToggle(tagName):\n    start, end = \"sel.first\", \"sel.last\"\n\n    if tagName in textArea.tag_names('sel.first'):\n        textArea.tag_remove(tagName, start, end)\n    else:\n        textArea.tag_add(tagName, start, end)\n\n\ntextArea = Text(root, font=f'{fontName} 15', relief=FLAT)\ntextArea.pack(fill=BOTH, expand=TRUE, padx=padding, pady=padding)\ntextArea.bind(\"<Key>\", keyDown)\n\nresetTags()\n\n\nmenu = Menu(root)\nroot.config(menu=menu)\n\nfileMenu = Menu(menu, tearoff=0)\nmenu.add_cascade(label=\"File\", menu=fileMenu)\n\nfileMenu.add_command(label=\"Open\", command=partial(fileManager, action='open'), accelerator='Ctrl+O')\nroot.bind_all('<Control-o>', partial(fileManager, action='open'))\n\nfileMenu.add_command(label=\"Save\", command=partial(fileManager, action='save'), accelerator='Ctrl+S')\nroot.bind_all('<Control-s>', partial(fileManager, action='save'))\n\nfileMenu.add_command(label=\"Exit\", command=root.quit)\n\n\nformatMenu = Menu(menu, tearoff=0)\nmenu.add_cascade(label=\"Format\", menu=formatMenu)\n\nfor tagType in tagTypes:\n    formatMenu.add_command(label=tagType, command=partial(tagToggle, tagName=tagType.lower()))\n\n\nroot.mainloop()\n", "tags": {"bold": [], "italic": [], "code": [], "normal size": [], "larger size": [], "largest size": [], "highlight": [], "highlight red": [], "highlight green": [], "highlight black": [], "text white": [], "text grey": [], "text blue": [], "text green": [], "text red": []}}